{ "name": "Pagination",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.DisabledMixin",
      "$w.HiddenCollapsedMixin",
      "$w.ClickableMixin",
      "$w.ViewportMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "Pagination.js" },
  "docs":
    { "summary": "[Pagination](https://support.wix.com/en/article/content-manager-adding-and-setting-up-a-pagination-bar) is an element for working with paging.",
      "description":
        [ "A pagination bar provides a way for your users to control the [paging of",
          " a dataset](https://dev.wix.com/docs/velo/api-reference/$w/dataset/introduction#dataset-pages). Elements that are connected to the",
          " same dataset as the pagination bar are affected when the user",
          " interacts with the pagination bar.",
          "",
          " For example, suppose you have a repeater connected to a dataset and that dataset",
          " is set to have a page size of 5. When the page loads, the repeater shows",
          " the first 5 items from the dataset. If a user clicks on the next page button",
          " of a pagination bar connected to the same dataset as the repeater,",
          " the repeater then shows items 6-10 from the dataset.",
          "",
          " You can also use a pagination bar without connecting it to a dataset.",
          " When doing so, you have to provide the pagination logic that runs when",
          " a user interacts with the pagination bar." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "accessibility",
        "labels":
          [ "new" ],
        "get": true,
        "set": false,
        "type": "$w.Pagination.Accessibility",
        "locations":
          [ { "lineno": 223,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Sets and gets the [Accessible Rich Internet Application (ARIA) attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes) of the element.",
            "description":
              [ "ARIA attributes are a set of properties that define ways to make web content and applications more accessible to people with disabilities. The properties provide additional information about the structure, behavior, and state of elements to assistive technologies such as screen readers, braille displays, and voice control software. Set the accessibility properties to design your elements to be more inclusive and usable to users with visual, auditory, motor, and or cognitive disabilities. The accessibility object only affects how assistive technologies read and present site content to users. It doesn't affect the appearance, functionality, or SEO of your site. ",
                "",
                ">**Note:** Incorrect use of ARIA can worsen accessibility for assistive technology users. Use carefully and test with assistive technologies. ",
                "",
                "Learn more about [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA)." ],
            "links": [],
            "examples":
              [ { "title": "Set the accessibility properties of an element",
                  "body":
                    [ "$w('#myBox').accessibility.ariaCurrent = false;",
                      "$w('#myBox').accessibility.ariaDescribedBy = $w('#boxDescriptionText');",
                      "$w('#myBox').accessibility.ariaHidden = true;",
                      "$w('#myBox').accessibility.ariaLabel = 'box content';",
                      "$w('#myBox').accessibility.ariaLabelledBy = $w('#boxLabelText');",
                      "$w('#myBox').accessibility.role = 'group';" ],
                  "extra":
                    {  } },
                { "title": "Get the accessibility properties of an element",
                  "body":
                    [ "const myBoxAccessibility = $w('#myPagination').accessibility;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "currentPage",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 60,
              "filename": "Pagination.js" },
            { "lineno": 87,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Sets or gets the current page.",
            "description":
              [ "Setting the `currentPage` property updates the visual indicator of the",
                " pagination bar to display the current page. The `currentPage` cannot be",
                " set to a value greater than [`totalPages`](#totalPages).",
                "",
                " If the pagination bar is connected to a dataset, setting `currentPage`",
                " updates the current page of the dataset and updates any relevant",
                " elements connected to that dataset.",
                "",
                " Getting the `currentPage` property returns the index of the current page.",
                " > **Note:** Page numbers begin with 1." ],
            "links":
              [ "[totalPages](#totalPages)" ],
            "examples":
              [ { "title": "Get a pagination bar's current page",
                  "body":
                    [ "let currentPage = $w(\"#myPagination\").currentPage;  // 4" ],
                  "extra":
                    {  } },
                { "title": "Set a pagination bar's current page",
                  "body":
                    [ "$w(\"#myPagination\").currentPage = 4;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "navigationType",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 172,
              "filename": "Pagination.js" },
            { "lineno": 192,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Navigation layout type.",
            "description":
              [ "> **Note:** This property is only supported in the [Wix Editor](https://support.wix.com/en/article/wix-editor-getting-started-with-the-wix-editor).",
                "This property has 3 supported values:",
                "- `\"clickNumbers\": Click on the page number.",
                "- `\"inputNumbers\"`: Input the page number.",
                "- `\"arrowsOnly\"`: Navigate between pages using arrows.",
                "![](../assets/images/navigation-types.png)" ],
            "links": [],
            "examples":
              [ { "title": "Get the navigation layout type for a pagination element",
                  "body":
                    [ "let navType = $w(\"#myPagination\").navigationType;  // \"clickNumbers\"" ],
                  "extra":
                    {  } },
                { "title": "Set the navigation layout type for a pagination element",
                  "body":
                    [ "$w(\"#myPagination\").navigationType = \"inputNumbers\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "nextEnabled",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "locations":
          [ { "lineno": 132,
              "filename": "Pagination.js" },
            { "lineno": 146,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Whether the Next button is enabled in the pagination bar.",
            "links": [],
            "examples":
              [ { "title": "Get whether the Next button is enabled in a pagination element",
                  "body":
                    [ "let isNextEnabled = $w(\"#myPagination\").nextEnabled;  // true" ],
                  "extra":
                    {  } },
                { "title": "Set whether the Next button is enabled in a pagination element",
                  "body":
                    [ "$w(\"#myPagination\").nextEnabled = true;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "previousEnabled",
        "labels": [],
        "get": true,
        "set": true,
        "type": "boolean",
        "locations":
          [ { "lineno": 152,
              "filename": "Pagination.js" },
            { "lineno": 166,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Whether the Previous button is enabled in the pagination bar.",
            "links": [],
            "examples":
              [ { "title": "Get whether the Previous button is enabled in a pagination element",
                  "body":
                    [ "let isPreviousEnabled = $w(\"#myPagination\").previousEnabled;  // true" ],
                  "extra":
                    {  } },
                { "title": "Set whether the Previous button is enabled in a pagination element",
                  "body":
                    [ "$w(\"#myPagination\").previousEnabled = true;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "totalPages",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 94,
              "filename": "Pagination.js" },
            { "lineno": 126,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Sets or gets the total number of pages shown in a pagination bar.",
            "description":
              [ "Setting the `totalPages` property updates the number of pages shown in",
                " the pagination bar.",
                "",
                " Setting `totalPages` to a value less than [`currentPage`](#currentPage)",
                " causes `currentPage` to be reset to the new `totalPages` value. For",
                " example, if `currentPage` is `8` and `totalPages` is set to `5`, `currentPage`",
                " is reset automatically to `5`.",
                "",
                " If the pagination bar is connected to a dataset, it is recommended that",
                " you allow the dateset to control the pagination bar's `totalPages` value.",
                "",
                " Getting the `totalPages` property returns the total number of pages available",
                " for selection in the pagination bar. If the pagination bar is",
                " connected to a dataset, the initial `totalPages` value is calculated based",
                " on the total number of items in the dataset and the dataset's page size." ],
            "links":
              [ "[currentPage](#currentPage)" ],
            "examples":
              [ { "title": "Get the number of pages available in a pagination element",
                  "body":
                    [ "let totalPages = $w(\"#myPagination\").totalPages;  // 14" ],
                  "extra":
                    {  } },
                { "title": "Set the number of pages available in a pagination element",
                  "body":
                    [ "$w(\"#myPagination\").totalPages = 14;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onChange",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the item is ready." } ],
        "ret":
          { "type": "$w.Pagination",
            "doc": "The pagination bar on which the event is now registered." },
        "locations":
          [ { "lineno": 32,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the pagination bar\n is changed.",
            "description":
              [ "A pagination bar receives a `change` event when a user changes the",
                " current page by interacting with the pagination bar.",
                "",
                " A `change` event is not triggered when you change a pagination bar's",
                " current page using the [`currentPage`](#currentPage) property.",
                "",
                " When a pagination bar is connected to a dataset, changing the [dataset's",
                " current page](https://dev.wix.com/docs/velo/api-reference/$w/dataset/introduction#dataset-pages) using dataset functions, such",
                " as [`nextPage()`](https://dev.wix.com/docs/velo/api-reference/$w/dataset/next-page), do not trigger `change`",
                " events on the pagination bar." ],
            "links": [],
            "examples":
              [ { "title": "Get the new current page of the pagination bar that was changed",
                  "body":
                    [ "$w(\"#myPagination\").onChange( (event) => {",
                      "  let newValue = event.target.currentPage;  // 4",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "Change" } },
      { "name": "onNextClicked",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the Next button is clicked." } ],
        "ret":
          { "type": "$w.Pagination",
            "doc": "The pagination bar on which the event is now registered." },
        "locations":
          [ { "lineno": 199,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the Next button in the pagination bar is clicked.",
            "links": [],
            "examples":
              [ { "title": "Log a message to the console when the Next button is clicked",
                  "body":
                    [ "$w(\"#myPagination\").onNextClicked(() => {",
                      "  console.log(\"Next clicked\");",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "Click" } },
      { "name": "onPreviousClicked",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the Previous button is clicked." } ],
        "ret":
          { "type": "$w.Pagination",
            "doc": "The pagination bar on which the event is now registered." },
        "locations":
          [ { "lineno": 215,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the Previous button in the pagination bar is clicked.",
            "links": [],
            "examples":
              [ { "title": "Log a message to the console when the Previous button is clicked",
                  "body":
                    [ "$w(\"#myPagination\").onPreviousClicked(() => {",
                      "  console.log(\"Previous clicked\");",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "Click" } } ],
  "callbacks": [],
  "messages":
    [ { "name": "Accessibility",
        "locations":
          [ { "lineno": 253,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "An object containing attributes to make your Wix elements more accessible.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "ariaLabel",
              "type": "string",
              "doc": "Sets or gets the [accessible name](https://www.w3.org/WAI/ARIA/apg/practices/names-and-descriptions/), a concise and descriptive label, of the element. Use `ariaLabel` when an element, such as an icon button, doesn't have a visual text label present, or has a label that should be overridden to provide clearer context. \n\nMax: 1000 characters",
              "optional": true },
            { "name": "ariaLabelledBy",
              "type":
                [ "$w.Text",
                  "$w.CollapsibleText" ],
              "doc": "Sets or gets the accessible name or contextual label of an element by referencing another element by ID. `ariaLabelledBy` can reference either a single text element or a collapsible text element. Both visible and non-visible text elements can be referenced. When an element's accessible name is set using `ariaLabelledBy`, it takes precedence over any label set using the `ariaLabel` property. Make sure that any element referenced by `ariaLabelledBy` is present in the DOM to avoid errors and confusion for assistive technology users. \n\nExample: `$w(“#myElement”).accessibility.ariaLabelledBy = $w(\"#text1\");`",
              "optional": true },
            { "name": "ariaDescribedBy",
              "type":
                [ "$w.Text",
                  "$w.CollapsibleText" ],
              "doc": "Sets or gets the contextual description of an element by referencing another element by ID. `ariaDescribedBy` can reference either a single text element or a collapsible text element. Both visible and non-visible text elements can be referenced. The contextual description can include descriptive text, instructions, or error messages that give more context to the element's label.  \n\nExample: `$w(“#myElement”).accessibility.ariaDescribedBy = $w(\"#text1\");`",
              "optional": true },
            { "name": "role",
              "type": "string",
              "doc": "Defines the role of the element, helping assistive technologies understand the element's purpose and how it should be interacted with. When set to `undefined` or `null`, the role is removed from the element and isn't read by assistive technologies. Learn more about [ARIA roles](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles). \n\nSupported values: `'alert'`, `'application'`, `'button'`, `'checkbox'`, `'complementary'`, `'group'`, `'heading'`, `'link'`, `'list'`, `'listBox'`, `'listItem'`, `'navigation'`, `'none'`, `'option'`, `'radio'`, `'radioGroup'`, `'range'`, `'region'`, `'tab'`, `'tabList'`, `'tabPanel'`, `'status'`, `null`, `undefined`. \n\nDefault: `undefined`",
              "optional": true },
            { "name": "ariaHidden",
              "type": "boolean",
              "doc": "Indicates whether the element is visible to or hidden from users that rely on assistive technologies. Use `ariaHidden` to hide decorative, redundant, or off-screen content from screen readers. When `true`, the element is hidden from assistive technologies but remains visible in the DOM. When `false`, the element is exposed to assistive technologies. If `ariaHidden` isn't explicitly set, the default is `undefined` and the property isn't read by assistive technologies.",
              "optional": true },
            { "name": "ariaCurrent",
              "type": "string",
              "doc": "Indicates whether the element is currently active or selected in a set of related items. This allows assistive technologies to relay to site visitors which element in a set is currently in focus. \nOnly 1 element in a set should have a value other than `'false'` at any time to ensure that assistive technologies correctly identify which element is currently in focus or active.\n\nSupported values: \n- `'true'`: Represents the current element in an unordered set of related elements.\n- `'false'`: Indicates that the element in a set is not currently active or selected.\n- `'page'`: Represents the current page in a multi-page site.\n- `'step'`: Marks the currently active step in a multi-step process such as a checkout flow.\n- `'date'`: Represents the currently selected date in a calendar.\n\nIf `ariaCurrent` isn't explicitly set, the default is `undefined` and the property isn't read by assistive technologies.",
              "optional": true } ],
        "extra":
          {  },
        "labels":
          [ "changed" ] } ],
  "extra":
    { "queryable": true },
  "relatedGuides":
    [ { "path": "./pagination/guides/CSS Classes.md" } ] }