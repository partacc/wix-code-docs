{ "name": "Pagination",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.DisabledMixin",
      "$w.HiddenCollapsedMixin",
      "$w.ClickableMixin",
      "$w.ViewportMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "Pagination.js" },
  "docs":
    { "summary": "[Pagination](https://support.wix.com/en/article/content-manager-adding-and-setting-up-a-pagination-bar) is an element for working with paging.",
      "description":
        [ "A pagination bar provides a way for your users to control the [paging of",
          " a dataset](https://dev.wix.com/docs/velo/api-reference/$w/dataset/introduction#dataset-pages). Elements that are connected to the",
          " same dataset as the pagination bar are affected when the user",
          " interacts with the pagination bar.",
          "",
          " For example, suppose you have a repeater connected to a dataset and that dataset",
          " is set to have a page size of 5. When the page loads, the repeater shows",
          " the first 5 items from the dataset. If a user clicks on the next page button",
          " of a pagination bar connected to the same dataset as the repeater,",
          " the repeater then shows items 6-10 from the dataset.",
          "",
          " You can also use a pagination bar without connecting it to a dataset.",
          " When doing so, you have to provide the pagination logic that runs when",
          " a user interacts with the pagination bar." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "currentPage",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 60,
              "filename": "Pagination.js" },
            { "lineno": 87,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Sets or gets the current page.",
            "description":
              [ "Setting the `currentPage` property updates the visual indicator of the",
                " pagination bar to display the current page. The `currentPage` cannot be",
                " set to a value greater than [`totalPages`](#totalPages).",
                "",
                " If the pagination bar is connected to a dataset, setting `currentPage`",
                " updates the current page of the dataset and updates any relevant",
                " elements connected to that dataset.",
                "",
                " Getting the `currentPage` property returns the index of the current page.",
                " > **Note:** Page numbers begin with 1." ],
            "links":
              [ "[totalPages](#totalPages)" ],
            "examples":
              [ { "title": "Get a pagination bar's current page",
                  "body":
                    [ "let currentPage = $w(\"#myPagination\").currentPage;  // 4" ],
                  "extra":
                    {  } },
                { "title": "Set a pagination bar's current page",
                  "body":
                    [ "$w(\"#myPagination\").currentPage = 4;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "navigationType",
        "labels":
          [ "new" ],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 172,
              "filename": "Pagination.js" },
            { "lineno": 192,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Navigation layout type.",
            "description":
              [ "> **Note:** This property is only supported in the [Wix Editor](https://support.wix.com/en/article/wix-editor-getting-started-with-the-wix-editor).",
                "This property has 3 supported values:",
                "- `\"clickNumbers\": Click on the page number.",
                "- `\"inputNumbers\"`: Input the page number.",
                "- `\"arrowsOnly\"`: Navigate between pages using arrows.",
                "![](../assets/images/navigation-types.png)" ],
            "links": [],
            "examples":
              [ { "title": "Get the navigation layout type for a pagination element",
                  "body":
                    [ "let navType = $w(\"#myPagination\").navigationType;  // \"clickNumbers\"" ],
                  "extra":
                    {  } },
                { "title": "Set the navigation layout type for a pagination element",
                  "body":
                    [ "$w(\"#myPagination\").navigationType = \"inputNumbers\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "nextEnabled",
        "labels":
          [ "new" ],
        "get": true,
        "set": true,
        "type": "boolean",
        "locations":
          [ { "lineno": 132,
              "filename": "Pagination.js" },
            { "lineno": 146,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Whether the Next button is enabled in the pagination bar.",
            "links": [],
            "examples":
              [ { "title": "Get whether the Next button is enabled in a pagination element",
                  "body":
                    [ "let isNextEnabled = $w(\"#myPagination\").nextEnabled;  // true" ],
                  "extra":
                    {  } },
                { "title": "Set whether the Next button is enabled in a pagination element",
                  "body":
                    [ "$w(\"#myPagination\").nextEnabled = true;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "previousEnabled",
        "labels":
          [ "new" ],
        "get": true,
        "set": true,
        "type": "boolean",
        "locations":
          [ { "lineno": 152,
              "filename": "Pagination.js" },
            { "lineno": 166,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Whether the Previous button is enabled in the pagination bar.",
            "links": [],
            "examples":
              [ { "title": "Get whether the Previous button is enabled in a pagination element",
                  "body":
                    [ "let isPreviousEnabled = $w(\"#myPagination\").previousEnabled;  // true" ],
                  "extra":
                    {  } },
                { "title": "Set whether the Previous button is enabled in a pagination element",
                  "body":
                    [ "$w(\"#myPagination\").previousEnabled = true;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "totalPages",
        "labels": [],
        "get": true,
        "set": true,
        "type": "number",
        "locations":
          [ { "lineno": 94,
              "filename": "Pagination.js" },
            { "lineno": 126,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Sets or gets the total number of pages shown in a pagination bar.",
            "description":
              [ "Setting the `totalPages` property updates the number of pages shown in",
                " the pagination bar.",
                "",
                " Setting `totalPages` to a value less than [`currentPage`](#currentPage)",
                " causes `currentPage` to be reset to the new `totalPages` value. For",
                " example, if `currentPage` is `8` and `totalPages` is set to `5`, `currentPage`",
                " is reset automatically to `5`.",
                "",
                " If the pagination bar is connected to a dataset, it is recommended that",
                " you allow the dateset to control the pagination bar's `totalPages` value.",
                "",
                " Getting the `totalPages` property returns the total number of pages available",
                " for selection in the pagination bar. If the pagination bar is",
                " connected to a dataset, the initial `totalPages` value is calculated based",
                " on the total number of items in the dataset and the dataset's page size." ],
            "links":
              [ "[currentPage](#currentPage)" ],
            "examples":
              [ { "title": "Get the number of pages available in a pagination element",
                  "body":
                    [ "let totalPages = $w(\"#myPagination\").totalPages;  // 14" ],
                  "extra":
                    {  } },
                { "title": "Set the number of pages available in a pagination element",
                  "body":
                    [ "$w(\"#myPagination\").totalPages = 14;" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onChange",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the item is ready." } ],
        "ret":
          { "type": "$w.Pagination",
            "doc": "The pagination bar on which the event is now registered." },
        "locations":
          [ { "lineno": 32,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the pagination bar\n is changed.",
            "description":
              [ "A pagination bar receives a `change` event when a user changes the",
                " current page by interacting with the pagination bar.",
                "",
                " A `change` event is not triggered when you change a pagination bar's",
                " current page using the [`currentPage`](#currentPage) property.",
                "",
                " When a pagination bar is connected to a dataset, changing the [dataset's",
                " current page](https://dev.wix.com/docs/velo/api-reference/$w/dataset/introduction#dataset-pages) using dataset functions, such",
                " as [`nextPage()`](https://dev.wix.com/docs/velo/api-reference/$w/dataset/next-page), do not trigger `change`",
                " events on the pagination bar." ],
            "links": [],
            "examples":
              [ { "title": "Get the new current page of the pagination bar that was changed",
                  "body":
                    [ "$w(\"#myPagination\").onChange( (event) => {",
                      "  let newValue = event.target.currentPage;  // 4",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "Change" } },
      { "name": "onNextClicked",
        "labels":
          [ "new" ],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the Next button is clicked." } ],
        "ret":
          { "type": "$w.Pagination",
            "doc": "The pagination bar on which the event is now registered." },
        "locations":
          [ { "lineno": 199,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the Next button in the pagination bar is clicked.",
            "links": [],
            "examples":
              [ { "title": "Log a message to the console when the Next button is clicked",
                  "body":
                    [ "$w(\"#myPagination\").onNextClicked(() => {",
                      "  console.log(\"Next clicked\");",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "Click" } },
      { "name": "onPreviousClicked",
        "labels":
          [ "new" ],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.EventHandler",
              "doc": "The name of the function or\n the function expression to run when the Previous button is clicked." } ],
        "ret":
          { "type": "$w.Pagination",
            "doc": "The pagination bar on which the event is now registered." },
        "locations":
          [ { "lineno": 215,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the Previous button in the pagination bar is clicked.",
            "links": [],
            "examples":
              [ { "title": "Log a message to the console when the Previous button is clicked",
                  "body":
                    [ "$w(\"#myPagination\").onPreviousClicked(() => {",
                      "  console.log(\"Previous clicked\");",
                      "});" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "Click" } } ],
  "callbacks": [],
  "messages":
    [ { "name": "Accessibility",
        "locations":
          [ { "lineno": 231,
              "filename": "Pagination.js" } ],
        "docs":
          { "summary": "An object containing attributes to make your Wix elements more accessible.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "members":
          [ { "name": "ariaLabel",
              "type": "string",
              "doc": "Sets or gets the [accessible name](https://www.w3.org/WAI/ARIA/apg/practices/names-and-descriptions/), a concise and descriptive label, of the element. Use `ariaLabel` when an element, such as an icon button, doesn't have a visual text label present, or has a label that should be overridden to provide clearer context. \n\nMax: 1000 characters",
              "optional": true },
            { "name": "ariaLabelledBy",
              "type":
                [ "$w.Text",
                  "$w.CollapsibleText" ],
              "doc": "Sets or gets the accessible name or contextual label of an element by referencing another element by ID. `ariaLabelledBy` can reference either a single text element or a collapsible text element. Both visible and non-visible text elements can be referenced. When an element's accessible name is set using `ariaLabelledBy`, it takes precedence over any label set using the `ariaLabel` property. Make sure that any element referenced by `ariaLabelledBy` is present in the DOM to avoid errors and confusion for assistive technology users. \n\nExample: `$w(“#myElement”).accessibility.ariaLabelledBy = $w(\"#text1\");`",
              "optional": true },
            { "name": "ariaDescribedBy",
              "type":
                [ "$w.Text",
                  "$w.CollapsibleText" ],
              "doc": "Sets or gets the contextual description of an element by referencing another element by ID. `ariaDescribedBy` can reference either a single text element or a collapsible text element. Both visible and non-visible text elements can be referenced. The contextual description can include descriptive text, instructions, or error messages that give more context to the element's label.  \n\nExample: `$w(“#myElement”).accessibility.ariaDescribedBy = $w(\"#text1\");`",
              "optional": true },
            { "name": "ariaInvalid",
              "type": "boolean",
              "doc": "Indicates to assistive technology users whether an element’s input value is invalid or if a required input field is empty. When `true`, assistive technologies alert users that the element’s input value doesn’t meet the expected criteria or that the required field is empty. When `false`, the value entered is valid or the field isn’t required. This helps assistive technology users identify and correct errors in form submissions.",
              "optional": true },
            { "name": "ariaRequired",
              "type": "string",
              "doc": "Indicates to assistive technology users whether an input element has a required field or action. If `ariaRequired` isn't explicitly set, the default is `undefined` and the property isn't read by assistive technologies. The `ariaRequired` property doesn't inform assistive technologies if the required input value is valid.\n\nSupported values: `'true'`, `'false'`",
              "optional": true } ],
        "extra":
          {  },
        "labels":
          [ "new" ] } ],
  "extra":
    { "queryable": true },
  "relatedGuides":
    [ { "path": "./pagination/guides/CSS Classes.md" } ] }