{ "name": "MobileDatePicker",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.DisabledMixin",
      "$w.HiddenCollapsedMixin",
      "$w.MobileValueMixin",
      "$w.ReadOnlyMixin",
      "$w.RequiredMixin" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "MobileDatePicker.js" },
  "docs":
    { "summary": "A mobile date picker \nis used for entering dates. It lets app users populate a\ndate field by picking a date using a calendar popup.\nYou can enable and disable dates, date ranges, and days of the week on your date picker.",
      "description":
        [ "<blockquote class=\"important\">",
          "",
          "__Important:__",
          "+ This API is only relevant for custom widgets in [Branded Apps](https://www.wix.com/app-builder).",
          "+ Custom widgets are not yet available to all users. ",
          "+ This API is in [Developer Preview](https://www.wix.com/velo/reference/api-overview/developer-preview) and is subject to change. ",
          "",
          "</blockquote>",
          "",
          "A mobile date picker is used for entering dates. It lets app users populate a date field by picking a date using a calendar popup. You can enable and disable dates, date ranges, and days of the week on your date picker." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "dateFormat",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "defaultValue": "'MM/DD/YYYY'",
        "locations":
          [ { "lineno": 34,
              "filename": "MobileDatePicker.js" },
            { "lineno": 50,
              "filename": "MobileDatePicker.js" } ],
        "docs":
          { "summary": "Gets the format of the date displayed in the mobile date picker.",
            "description":
              [ "Getting `dateFormat` returns the current format used to display the date in the mobile date picker.",
                "",
                "`dateFormat` does not affect the format of `value`." ],
            "links": [],
            "examples":
              [ { "title": "Get a mobile date picker's date format",
                  "body":
                    [ "let format = $w('#myMobileDatePicker').dateFormat;  // 'MM/DD/YYYY'" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "disabledDateRanges",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "DateRange" ] },
        "locations":
          [ { "lineno": 58,
              "filename": "MobileDatePicker.js" },
            { "lineno": 98,
              "filename": "MobileDatePicker.js" } ],
        "docs":
          { "summary": "Sets or gets ranges of dates that an app user can't select.",
            "description":
              [ "Setting `disabledDateRanges` prevents app users from",
                " selecting dates in the specified ranges.",
                "",
                " Set `disabledDateRanges` to:",
                " + An array of date ranges to disable, each with a start date and an end date.",
                " + An empty array (`[]`), to remove the current disabled dates.",
                "",
                " Getting `disabledDateRanges` returns the current",
                " list of disabled date ranges.",
                "",
                " Ranges are inclusive. This means that January 10th and February 10th are disabled ",
                " when specifying a range from January 10, 2025 to February 10, 2025. ",
                "",
                " ",
                " Disabled dates override any dates enabled with `enabledDateRanges`.",
                " This means that if a date matches both enabled and disabled properties, the app user ",
                " can't select the date in the mobile date picker." ],
            "links":
              [ "[disabledDaysOfWeek](#disabledDaysOfWeek)",
                "[enabledDateRanges](#enabledDateRanges)" ],
            "examples":
              [ { "title": "Get ranges of dates that are disabled",
                  "body":
                    [ "let disabledDates = $w('#myMobileDatePicker').disabledDateRanges;",
                      "",
                      "let firstDisabledStartDateAsString = disabledDates[0].startDate.toDateString(); // 'Sat Dec 25 2022'" ],
                  "extra":
                    {  } },
                { "title": "Set ranges of dates that are disabled",
                  "body":
                    [ "const holidays2024 = [",
                      "    {",
                      "      startDate: new Date('4/15/2024'),",
                      "      endDate: new Date('4/17/2024')",
                      "    },",
                      "    {",
                      "      startDate: new Date('12/25/2024'),",
                      "      endDate: new Date('01/01/2025')",
                      "    }",
                      "  ];",
                      "  $w('#myMobileDatePicker').disabledDateRanges = holidays2024;" ],
                  "extra":
                    {  } },
                { "title": "Set ranges of disabled dates based on a specific time zone",
                  "body":
                    [ "$w('#myMobileDatePicker').timeZone = 'Pacific/Auckland';",
                      "",
                      "// In 2022, New Zealand switches to daylight savings ",
                      "// time on September 25th",
                      "",
                      "const disabledDates = [",
                      "  {",
                      "    startDate: new Date('06/10/2022 GMT+12'),",
                      "    endDate: new Date('08/15/2022 GMT+12')",
                      "  },",
                      "  {",
                      "    startDate: new Date('08/01/2022 GMT+12'),",
                      "    endDate: new Date('10/01/2022 GMT+13')",
                      "  }",
                      "];",
                      "",
                      "$w('#myMobileDatePicker').disabledDateRanges = disabledDates;" ],
                  "extra":
                    { "description": "This example demonstrates how to base the disabled date ranges on the time zone for a specific country, such as \n New Zealand, and to take daylight savings into account (GMT+13 instead of GMT+12)." } },
                { "title": "Disable weekends and holidays that occur during date ranges that are enabled",
                  "body":
                    [ "const roster = [",
                      "    {",
                      "      startDate: new Date('1/1/2024'),",
                      "      endDate: new Date('1/31/2024')",
                      "    },",
                      "    {",
                      "      startDate: new Date('4/01/2024'),",
                      "      endDate: new Date('4/30/2024')",
                      "    },",
                      "    {",
                      "      startDate: new Date('7/01/2024'),",
                      "      endDate: new Date('7/31/2024')",
                      "    },",
                      "    {",
                      "      startDate: new Date('10/01/2024'),",
                      "      endDate: new Date('10/31/2024')",
                      "    }",
                      "  ];",
                      "  ",
                      "  const holidays2024 = [",
                      "    {",
                      "      startDate: new Date('4/15/2024'),",
                      "      endDate: new Date('4/17/2024')",
                      "    },",
                      "    {",
                      "      startDate: new Date('12/25/2024'),",
                      "      endDate: new Date('01/01/2025')",
                      "    }",
                      "  ];",
                      "  ",
                      "  $w('#myMobileDatePicker').enabledDateRanges = roster;        // Available on 1st month of each quarter   ",
                      "  $w('#myMobileDatePicker').disabledDateRanges = holidays2024; // Not available on holidays",
                      "  $w('#myMobileDatePicker').disabledDaysOfWeek = [0, 6];       // Not available on weekends" ],
                  "extra":
                    { "description": "This example demonstrates how to: \n + Enable certain months in the mobile date picker, such as for an \"on call\" roster for a team\n + Disable holidays\n + Disable weekends" } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "disabledDaysOfWeek",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "number" ] },
        "locations":
          [ { "lineno": 106,
              "filename": "MobileDatePicker.js" },
            { "lineno": 140,
              "filename": "MobileDatePicker.js" } ],
        "docs":
          { "summary": "Sets or gets the days of the week that an app user can't select.",
            "description":
              [ "Setting `disabledDaysOfWeek` prevents app users",
                " from selecting the specified days of the weeks. ",
                "",
                " Set `disabledDaysOfWeek` to an empty array (`[]`) to remove the current",
                " disabled days of the week.",
                "",
                " Getting `disabledDaysOfWeek` returns the",
                " current list of disabled days of the week.",
                "",
                " `disabledDaysOfWeek` accepts an array of integers from 0 to",
                " 6, where 0 represent Sunday, 1 is Monday, 2 is Tuesday, and so on.",
                "",
                " If a date falls on a disabled day of the week, but is also set as an enabled date",
                " with `enabledDateRanges`, the date is",
                " disabled and the app user can't select the date in the date picker." ],
            "links":
              [ "[disabledDateRanges](#disabledDateRanges)" ],
            "examples":
              [ { "title": "Get which days of the week are disabled",
                  "body":
                    [ "let days = $w(\"#myMobileDatePicker\").disabledDaysOfWeek;",
                      "",
                      "let secondDisabledDay = days[1]; // 6" ],
                  "extra":
                    {  } },
                { "title": "Disable weekends",
                  "body":
                    [ "$w(\"#myMobileDatePicker\").disabledDaysOfWeek = [0, 6];" ],
                  "extra":
                    {  } },
                { "title": "Disable weekends and holidays that occur during date ranges that are enabled",
                  "body":
                    [ "const roster = [",
                      "    {",
                      "      startDate: new Date('1/1/2024'),",
                      "      endDate: new Date('1/31/2024')",
                      "    },",
                      "    {",
                      "      startDate: new Date('4/01/2024'),",
                      "      endDate: new Date('4/30/2024')",
                      "    },",
                      "    {",
                      "      startDate: new Date('7/01/2024'),",
                      "      endDate: new Date('7/31/2024')",
                      "    },",
                      "    {",
                      "      startDate: new Date('10/01/2024'),",
                      "      endDate: new Date('10/31/2024')",
                      "    }",
                      "  ];",
                      "  ",
                      "  const holidays2024 = [",
                      "    {",
                      "      startDate: new Date('4/15/2024'),",
                      "      endDate: new Date('4/17/2024')",
                      "    },",
                      "    {",
                      "      startDate: new Date('12/25/2024'),",
                      "      endDate: new Date('01/01/2025')",
                      "    }",
                      "  ];",
                      "  ",
                      "  $w('#myMobileDatePicker').enabledDateRanges = roster;        // Available on 1st month of each quarter   ",
                      "  $w('#myMobileDatePicker').disabledDateRanges = holidays2024; // Not available on holidays",
                      "  $w('#myMobileDatePicker').disabledDaysOfWeek = [0, 6];       // Not available on weekends" ],
                  "extra":
                    { "description": "This example demonstrates how to: \n + Enable certain months in the date picker, such as for an \"on call\" roster for a team\n + Disable holidays\n + Disable weekends" } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "enabledDateRanges",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type":
          { "name": "Array",
            "typeParams":
              [ "DateRange" ] },
        "locations":
          [ { "lineno": 146,
              "filename": "MobileDatePicker.js" },
            { "lineno": 196,
              "filename": "MobileDatePicker.js" } ],
        "docs":
          { "summary": "Sets or gets ranges of dates that an app user can select.",
            "description":
              [ "Setting `enabledDateRanges` lets app users",
                " select dates in the specified ranges, provided that the dates aren't ",
                " disabled by some other property. ",
                "  ",
                "> **Note:** All dates outside the set ranges are disabled.",
                "",
                " Set `enabledDateRanges` to:",
                " + An array of date ranges to enable, each with a start date and an end date.",
                " + An empty array (`[]`), to disable all dates.",
                " + Null, to ignore `enabledDateRanges`. Use this to ignore previously set enabled date ranges.",
                "",
                " Getting `enabledDateRanges` returns the current",
                " list of enabled date ranges.",
                "",
                " Ranges are inclusive. This means that January 10th and February 10th are enabled ",
                " when specifying a range from January 10, 2025 to February 10, 2025. ",
                "",
                "",
                " Disabled dates override any dates enabled with `enabledDateRanges`.",
                " This includes dates disabled in the editor and with the following properties: ",
                " + `disabledDateRanges`",
                " + `disabledDaysOfWeek`",
                " + `minDate`",
                " + `maxDate`",
                " This means that if a date matches both enabled and disabled properties, the app user ",
                " can't select the date in the date picker." ],
            "links":
              [ "[disabledDaysOfWeek](#disabledDaysOfWeek)",
                "[disabledDateRanges](#disabledDateRanges)",
                "[enabledDateRanges](#enabledDateRanges)" ],
            "examples":
              [ { "title": "Get ranges of dates that are enabled",
                  "body":
                    [ "let enabledDates = $w('#myMobileDatePicker').enabledDateRanges;",
                      "",
                      "let firstEnabledStartDateAsString = enabledDates[0].startDate.toDateString(); // 'Sat Dec 25 2022'" ],
                  "extra":
                    {  } },
                { "title": "Set ranges of dates that are enabled",
                  "body":
                    [ "const monthsOnCall = [",
                      "  {",
                      "    startDate: new Date('1/1/2022'),",
                      "    endDate: new Date('1/31/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('4/01/2022'),",
                      "    endDate: new Date('4/30/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('7/01/2022'),",
                      "    endDate: new Date('7/31/2022')",
                      "  },",
                      "  {",
                      "    startDate: new Date('10/01/2022'),",
                      "    endDate: new Date('10/31/2022')",
                      "  }",
                      "];",
                      "$w('#myMobileDatePicker').enabledDateRanges = monthsOnCall;" ],
                  "extra":
                    {  } },
                { "title": "Set ranges of enabled dates based on a specific time zone",
                  "body":
                    [ "$w('#myMobileDatePicker').timeZone = 'Pacific/Auckland';",
                      "",
                      "// In 2022, New Zealand switches to daylight savings ",
                      "// time on September 25th",
                      "",
                      "const enabledDates = [",
                      "  {",
                      "    startDate: new Date('06/10/2022 GMT+12'),",
                      "    endDate: new Date('08/15/2022 GMT+12')",
                      "  },",
                      "  {",
                      "    startDate: new Date('08/01/2022 GMT+12'),",
                      "    endDate: new Date('10/01/2022 GMT+13')",
                      "  }",
                      "];",
                      "",
                      "$w('#myMobileDatePicker').enabledDateRanges = enabledDates;" ],
                  "extra":
                    { "description": "This example demonstrates how to set a timezone when specifying enabled date ranges. The example \n also takes daylight savings into account (GMT+13 instead of GMT+12)." } },
                { "title": "Disable weekends and holidays that occur during date ranges that are enabled",
                  "body":
                    [ "const roster = [",
                      "    {",
                      "      startDate: new Date('1/1/2024'),",
                      "      endDate: new Date('1/31/2024')",
                      "    },",
                      "    {",
                      "      startDate: new Date('4/01/2024'),",
                      "      endDate: new Date('4/30/2024')",
                      "    },",
                      "    {",
                      "      startDate: new Date('7/01/2024'),",
                      "      endDate: new Date('7/31/2024')",
                      "    },",
                      "    {",
                      "      startDate: new Date('10/01/2024'),",
                      "      endDate: new Date('10/31/2024')",
                      "    }",
                      "  ];",
                      "  ",
                      "  const holidays2024 = [",
                      "    {",
                      "      startDate: new Date('4/15/2024'),",
                      "      endDate: new Date('4/17/2024')",
                      "    },",
                      "    {",
                      "      startDate: new Date('12/25/2024'),",
                      "      endDate: new Date('01/01/2025')",
                      "    }",
                      "  ];",
                      "  ",
                      "  $w('#myMobileDatePicker').enabledDateRanges = roster;        // Available on 1st month of each quarter   ",
                      "  $w('#myMobileDatePicker').disabledDateRanges = holidays2024; // Not available on holidays",
                      "  $w('#myMobileDatePicker').disabledDaysOfWeek = [0, 6];       // Not available on weekends" ],
                  "extra":
                    { "description": "This example demonstrates how to: \n + Enable certain months in the mobile date picker, such as for an \"on call\" roster for a team\n + Disable holidays\n + Disable weekends" } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "label",
        "labels": [],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 309,
              "filename": "MobileDatePicker.js" },
            { "lineno": 320,
              "filename": "MobileDatePicker.js" } ],
        "docs":
          { "summary": "Sets or gets the label of an element.",
            "links": [],
            "examples":
              [ { "title": "Get an element's label",
                  "body":
                    [ "let label = $w(\"#myMobileDatePicker\").label;  // \"My mobile date picker's label\"" ],
                  "extra":
                    {  } },
                { "title": "Set an element's label",
                  "body":
                    [ "$w(\"#myMobileDatePicker\").label = \"New Label\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "maxDate",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "Date",
        "defaultValue": "undefined",
        "locations":
          [ { "lineno": 204,
              "filename": "MobileDatePicker.js" },
            { "lineno": 230,
              "filename": "MobileDatePicker.js" } ],
        "docs":
          { "summary": "Sets or gets the latest date that an app user can select.",
            "description":
              [ "Setting `maxDate` prevents app users from selecting",
                "dates past the maximum date.",
                "",
                "Set `maxDate` to `undefined` to remove the",
                "current maximum date limitation.",
                "",
                "Getting `maxDate` returns the current maximum",
                "date that an app user can select.",
                "",
                "If a date is past the maximum date but is also set as an enabled date",
                "with `enabledDateRanges`, the date is",
                "disabled and the app user can't select the date in the date picker." ],
            "links":
              [ "[minDate](#minDate)" ],
            "examples":
              [ { "title": "Get a mobile date picker's maximum date",
                  "body":
                    [ "// maxDate must be set before it can be retrieved. For example,",
                      "// $w(\"#myDatePicker\").maxDate = new Date('01/13/2017');",
                      "",
                      "let pickerMaxDate = $w(\"#myMobileDatePicker\").maxDate;",
                      "",
                      "let maxStr = pickerMaxDate.toDateString(); // \"Fri Jan 13 2017\"" ],
                  "extra":
                    {  } },
                { "title": "Set a mobile date picker's maximum date to today",
                  "body":
                    [ "$w(\"#myMobileDatePicker\").maxDate = new Date('01/13/2017');" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "minDate",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "Date",
        "defaultValue": "undefined",
        "locations":
          [ { "lineno": 238,
              "filename": "MobileDatePicker.js" },
            { "lineno": 264,
              "filename": "MobileDatePicker.js" } ],
        "docs":
          { "summary": "Sets or gets the earliest date that an app user can select.",
            "description":
              [ "Setting `minDate` prevents app users from selecting",
                "dates before the minimum date.",
                "",
                "Set `minDate` to `undefined` to remove the current minimum date limitation.",
                "",
                "Getting `minDate` returns the current minimum",
                "date that an app user can select.",
                "",
                "If a date is before the minimum date but is also set as an enabled date",
                "with `enabledDateRanges`, the date is",
                "disabled and the app user can't select the date in the date picker." ],
            "links":
              [ "[maxDate](#maxDate)" ],
            "examples":
              [ { "title": "Get a mobile date picker's minimum date",
                  "body":
                    [ "// minDate must be set before it can be retrieved. For example,",
                      "// $w(\"#myMobileDatePicker\").minDate = new Date('01/13/2017');",
                      "",
                      "let pickerMinDate = $w(\"#myMobileDatePicker\").minDate;",
                      "",
                      "let minStr = pickerMinDate.toDateString(); // \"Fri Jan 13 2017\"" ],
                  "extra":
                    {  } },
                { "title": "Set a mobile date picker's minimum date to today",
                  "body":
                    [ "$w(\"#myMobileDatePicker\").minDate = new Date('01/13/2017');" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "placeholder",
        "labels":
          [ "changed" ],
        "get": true,
        "set": true,
        "type": "string",
        "locations":
          [ { "lineno": 326,
              "filename": "MobileDatePicker.js" },
            { "lineno": 345,
              "filename": "MobileDatePicker.js" } ],
        "docs":
          { "summary": "Sets or gets the mobile date picker's placeholder text.",
            "description":
              [ "Placeholder text is typically used to provide a",
                " hint to the app user of what to enter into an input mobile date picker that accepts",
                " text. When the app user begins to enter text, the placeholder text disappears." ],
            "links": [],
            "examples":
              [ { "title": "Get an mobile date picker's placeholder text",
                  "body":
                    [ "let placeholderText = $w(\"#myMobileDatePicker\").placeholder; // \"Enter name\"" ],
                  "extra":
                    {  } },
                { "title": "Set an mobile date picker's placeholder text",
                  "body":
                    [ "$w(\"#myMobileDatePicker\").placeholder = \"Enter your name\";" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations": [],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true } }