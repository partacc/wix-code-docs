{ "name": "MenuContainer",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element" ],
  "labels":
    [ "changed" ],
  "location":
    { "lineno": 1,
      "filename": "MenuContainer.js" },
  "docs":
    { "summary": "A [menu container](https://support.wix.com/en/article/wix-editor-about-the-mobile-menu) holds the elements in a\n mobile menu that are used for navigating between mobile site pages.",
      "description":
        [ "You can add elements to or remove elements from the container to customize your site's mobile menu. ",
          " The menu container helps mobile site visitors navigate from page to page on a mobile site and ",
          " only appears in the mobile version of your site. Use [Menu](https://www.wix.com/velo/reference/$w/menu) to make changes to your regular site.",
          "",
          " With Velo, you can customize mobile menu items by changing their labels, links, ",
          " where the item opens, and if an item displays as selected. This includes using Velo ",
          " to modify mobile site menus in real time during the visitor's stay on the site." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "customClassList",
        "labels":
          [ "new" ],
        "get": true,
        "set": false,
        "type": "$w.CustomClassList",
        "locations":
          [ { "lineno": 50,
              "filename": "MenuContainer.js" } ],
        "docs":
          { "summary": "A property that represents an element's custom CSS classes.",
            "description":
              [ "> This property is only available to Wix Studio users.",
                "",
                "You can use this property to manipulate the custom CSS classes of an element. For example,",
                "you can add a custom class to an element or replace an existing class with a new custom class.",
                "",
                "Custom classes are those that you create on a site, not the predefined global classes",
                "that are provided for each element.",
                "",
                "Use the following methods to work with the element's custom CSS classes:",
                "+ [`add()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/add): Adds custom CSS classes to the class list of an element.",
                "+ [`contains()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/contains): Indicates whether the element's class list contains a specified custom CSS class.",
                "+ [`remove()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/remove): Removes custom CSS classes from an element's class list.",
                "+ [`replace()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/replace): Replaces a custom CSS class of an element with a different custom CSS class.",
                "+ [`toggle()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/toggle): Toggles an element's custom CSS class.",
                "+ [`values()`](https://dev.wix.com/docs/velo/velo-only-apis/$w/custom-class-list/values): Retrieves an array of strings listing an element's custom CSS classes.",
                "",
                "> **Note:** For more information, see [Styling Elements with CSS](https://dev.wix.com/docs/velo/velo-only-apis/$w/styling-elements-with-css)",
                "> and the [MDN CSS reference docs](https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics)." ],
            "links":
              [ "$w.CustomClassList" ],
            "examples":
              [ { "title": "Add a single class to an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.add(\"className1\");" ],
                  "extra":
                    {  } },
                { "title": "Add multiple classes to an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.add(\"className1\", \"className2\");" ],
                  "extra":
                    {  } },
                { "title": "Indicate whether an element contains a specified class",
                  "body":
                    [ "$w(\"#myElement\").customClassList.contains(\"className1\"); //true" ],
                  "extra":
                    {  } },
                { "title": "Remove a single class from an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.remove(\"className1\");" ],
                  "extra":
                    {  } },
                { "title": "Remove multiple classes from an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.remove(\"className1\", \"className2\");" ],
                  "extra":
                    {  } },
                { "title": "Replace a class of an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.replace(\"className1, className2\");" ],
                  "extra":
                    {  } },
                { "title": "Toggle a class of an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.toggle(\"className1\")  // true" ],
                  "extra":
                    {  } },
                { "title": "Toggle a class of an element",
                  "body":
                    [ "if( $w(\"#myElement\").customClassList.contains(\"className1\") ) {",
                      "  $w(\"#myElement\").customClassList.replace(\"className1, className2\");",
                      "}",
                      "else {",
                      "  $w(\"#myElement\").customClassList.replace(\"className2, className1\");",
                      "}" ],
                  "extra":
                    {  } },
                { "title": "Get the classes of an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.value; // \"className1 className2\"" ],
                  "extra":
                    {  } },
                { "title": "Gets a list of the classes of an element",
                  "body":
                    [ "$w(\"#myElement\").customClassList.values(); // [\"className1\", \"className2\"]" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "close",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the mobile menu has finished closing." },
        "locations":
          [ { "lineno": 36,
              "filename": "MenuContainer.js" } ],
        "docs":
          { "summary": "Closes a mobile menu.",
            "description":
              [ "The `close()` function returns a Promise that is resolved when the",
                " custom mobile menu's container has finished closing." ],
            "links":
              [ "[open( )](#open)" ],
            "examples":
              [ { "title": "Close a custom mobile menu",
                  "body":
                    [ "$w(\"#myMenuContainer\").close();" ],
                  "extra":
                    {  } },
                { "title": "Close a custom mobile menu and log a message when done",
                  "body":
                    [ "$w(\"#myMenuContainer\").close()",
                      "  .then( () => {",
                      "    console.log(\"Menu is closed\");",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "open",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the mobile menu has finished opening." },
        "locations":
          [ { "lineno": 23,
              "filename": "MenuContainer.js" } ],
        "docs":
          { "summary": "Opens a mobile menu.",
            "description":
              [ "The `open()` function returns a Promise that is resolved when the",
                " mobile menu's container has finished opening." ],
            "links":
              [ "[close( )](#close)" ],
            "examples":
              [ { "title": "Open a custom mobile menu",
                  "body":
                    [ "$w(\"#myMenuContainer\").open();" ],
                  "extra":
                    {  } },
                { "title": "Open a custom mobile menu and log a message when done",
                  "body":
                    [ "$w(\"#myMenuContainer\").open()",
                      "  .then( () => {",
                      "    console.log(\"Menu is open\");",
                      "  } );" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    { "queryable": true },
  "relatedGuides":
    [ { "path": "./menucontainer/guides/CSS Classes.md" } ] }