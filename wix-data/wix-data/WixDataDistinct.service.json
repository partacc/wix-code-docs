{ "name": "WixDataDistinct",
  "memberOf": "wix-data",
  "mixes":
    [ "wix-data.WixDataFilter" ],
  "labels":
    [ "new" ],
  "location":
    { "lineno": 1,
      "filename": "distinct.js" },
  "docs":
    { "summary": "Provides functionality for refining a distinct data query.",
      "description":
        [ "The `WixDataDistinct` methods allow you to run, sort, filter, and control the results of a distinct query.",
          "",
          "When you run a query with the [`distinct()`](https://dev.wix.com/docs/velo/api-reference/wix-data/wix-data-query/distinct) method, the query only returns distinct items. For example, the following code queries a collection for customers over the age of 20 and logs their last names in ascending order, without duplicates:",
          "",
          "",
          " ```javascript",
          " import wixData from 'wix-data';",
          "",
          " wixData.query(\"customers\")",
          "   .gt(\"age\", 20)",
          "   .distinct(\"lastName\")",
          "   .then((results) => {",
          "     console.log(results.items);",
          "   });",
          " ```",
          "",
          " You can then further refine the distinct query by calling `WixDataDistinct` methods in the [`beforeDistinct()`](ADDLINK) hook." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties": [],
  "operations":
    [ { "name": "ascending",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The properties used in the sort.",
              "spread": true } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 10,
              "filename": "sortMixin.js" } ],
        "docs":
          { "summary": "Adds a sort to a query or sort, sorting by the specified properties in ascending order.",
            "description":
              [ "The `ascending()` function refines a `WixDataQuery` or `WixDataSort` to sort in ascending order of",
                " the specified properties. If you specify more than one property,",
                " `ascending()` sorts the results in ascending order by each property in the",
                " order they are listed.",
                "",
                " You can sort the following types:",
                "",
                " + Number: Sorts numerically.",
                " + Date: Sorts by date and time.",
                " + String: Sorts lexicographically, so `\"abc\"` comes after `\"XYZ\"`.",
                " + Reference: Compares by the ID of the referenced item as a String.",
                "",
                "",
                " If a property contains a number as a String, that value will be sorted",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified sort property are ranked lowest." ],
            "links": [],
            "examples":
              [ { "title": "Add an ascending sort to a query",
                  "body":
                    [ "let newQuery = query.ascending(\"last_name\", \"first_name\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an ascending sort, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  });" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an ascending sort, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .ascending(\"last_name\", \"first_name\")",
                      "  .eq(\"status\", \"active\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then((results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "descending",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "propertyName",
              "type": "string",
              "doc": "The properties used in the sort.",
              "spread": true } ],
        "ret":
          { "type": "wix-data.WixDataQuery",
            "doc": "A `WixDataQuery` object representing the refined query." },
        "locations":
          [ { "lineno": 41,
              "filename": "sortMixin.js" } ],
        "docs":
          { "summary": "Adds a sort to a query or sort, sorting by the specified properties in descending order.",
            "description":
              [ "The `descending()` function refines a `WixDataQuery` or `WixDataSort` to sort in descending order of",
                " the specified properties. If you specify more than one property,",
                " `descending()` sorts the results in descending order by each property in the",
                " order they are listed.",
                "",
                " You can sort the following types:",
                "",
                " + Number: Sorts numerically.",
                " + Date: Sorts by date and time.",
                " + String: Sorts lexicographically, so `\"abc\"` comes before `\"XYZ\"`.",
                " + Reference: Compares by the ID of the referenced item as a String.",
                "",
                "",
                " If a property contains a number as a String, that value will be sorted",
                " alphabetically and not numerically. Items that do not have a value for the",
                " specified sort property are ranked lowest." ],
            "links": [],
            "examples":
              [ { "title": "Add an descending sort to a query",
                  "body":
                    [ "let newQuery = query.descending(\"last_name\", \"first_name\");" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an descending sort, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .descending(\"last_name\", \"first_name\")",
                      "  .find()",
                      "  .then((results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  });" ],
                  "extra":
                    {  } },
                { "title": "Create a query, add an descending sort, and run it",
                  "body":
                    [ "import wixData from 'wix-data';",
                      "",
                      "// ...",
                      "",
                      "wixData.query(\"myCollection\")",
                      "  .descending(\"last_name\", \"first_name\")",
                      "  .eq(\"status\", \"active\")",
                      "  .limit(10)",
                      "  .find()",
                      "  .then((results) => {",
                      "    if(results.items.length > 0) {",
                      "      let items = results.items;",
                      "      let firstItem = items[0];",
                      "      let totalCount = results.totalCount;",
                      "      let pageSize = results.pageSize;",
                      "      let currentPage = results.currentPage;",
                      "      let totalPages = results.totalPages;",
                      "      let hasNext = results.hasNext();",
                      "      let hasPrev = results.hasPrev();",
                      "      let length = results.length;",
                      "      let query = results.query;",
                      "    } else {",
                      "      // handle case where no matching items found",
                      "    }",
                      "  })",
                      "  .catch((error) => {",
                      "    let errorMsg = error.message;",
                      "    let code = error.code;",
                      "  });" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "filter",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "filter",
              "type": "WixDataFilter",
              "doc": "Filter to refine the distinct query." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-data.WixDataDistinct" ] },
            "doc": "Fulfilled - The distinct query object.\nRejected - The errors that caused the rejection." },
        "locations":
          [ { "lineno": 44,
              "filename": "distinct.js" } ],
        "docs":
          { "summary": "Sets the filter used to refine the distinct query.",
            "description":
              [ "The `filter()` method defines the filter used to refine the distinct query. It returns a Promise that resolve to the [`WixDataDistinct`](ADDLINK) query object. The Promise is rejected if `filter()` is called with incorrect permissions or if any of the methods used to refine the query are invalid." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "getFilter",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-data.WixDataFilter" ] },
            "doc": "Fulfilled - The filter used to refine the distinct query.\nRejected - The errors that caused the rejection." },
        "locations":
          [ { "lineno": 29,
              "filename": "distinct.js" } ],
        "docs":
          { "summary": "Returns the filter used to refine the distinct query.",
            "description":
              [ "The `getFilter()` method returns a Promise that resolves to the [`WixDataFilter()`](https://dev.wix.com/docs/sdk/backend-modules/data/items/wix-data-filter/introduction) that was used to refine the distinct query. The Promise is rejected if `getFilter()` is called with incorrect permissions or if any of the methods used to refine the query are invalid." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "getPropertyName",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "string" ] },
            "doc": "Fulfilled - The property used to define the distinct query.\nRejected - The errors that caused the rejection." },
        "locations":
          [ { "lineno": 60,
              "filename": "distinct.js" } ],
        "docs":
          { "summary": "Returns the name of the property used to define the distinct query.",
            "description":
              [ "The `getPropertyName()` method returns a Promise that resolve to the name of the property used to define the distinct query. The Promise is rejected if the method is called with incorrect permissions or if any of the methods used to refine the query are invalid." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "limit",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "limit",
              "type": "number",
              "doc": "Number of items to return, which is also the [`pageSize`](https://dev.wix.com/docs/sdk/backend-modules/data/items/wix-data-result/page-size) of the results object." } ],
        "ret":
          { "type": "wix-data.WixDataDistinct",
            "doc": "A [`WixDataDistinct`](ADDLINK) object representing the refined distinct query." },
        "locations":
          [ { "lineno": 91,
              "filename": "distinct.js" } ],
        "docs":
          { "summary": "Limits the number of items the distinct query returns.",
            "description":
              [ "The `limit()` method defines the number of results a distinct query returns in each page. Only one page of results is retrieved at a time. use the [`next()`](https://dev.wix.com/docs/sdk/backend-modules/data/items/wix-data-result/next) and [`prev()`](https://dev.wix.com/docs/sdk/backend-modules/data/items/wix-data-result/prev) methods to navigate the pages of a query result.",
                "",
                " By default, `limit` is set to `50`.",
                "",
                " The maximum value that `limit()` can accept is `1000`.",
                "",
                " > **Note** : For some [Wix app collections](https://dev.wix.com/docs/develop-websites/articles/databases/wix-data/collections/working-with-wix-app-collections-and-code), the maximum value `limit()` can accept is less than `1000`. For example, the maximum limit for the Wix `Stores/Product` collection is 100." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "propertyName",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "newPropertyName",
              "type": "string",
              "doc": "Property by which to return distinct values, without duplicates." } ],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "wix-data.WixDataDistinct" ] },
            "doc": "Fulfilled - The distinct query object.\nRejected - The errors that caused the rejection." },
        "locations":
          [ { "lineno": 75,
              "filename": "distinct.js" } ],
        "docs":
          { "summary": "Sets the property name by which to return distinct values.",
            "description":
              [ "The `propertyName()` method defines the property by which to return distinct values, without duplicates. It returns a Promise that resolves to the [`WixDataDistinct`](ADDLINK) query object. The Promise is rejected if `propertyName()` is called with incorrect permissions or if any of the methods used to refine the query are invalid." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "skip",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "skip",
              "type": "number",
              "doc": "Number of items to skip in before returning the distinct query results." } ],
        "ret":
          { "type": "wix-data.WixDataDistinct",
            "doc": "A `WixDataDistinct` object representing the refined query." },
        "locations":
          [ { "lineno": 110,
              "filename": "distinct.js" } ],
        "docs":
          { "summary": "Sets the number of items to skip before returning distinct query results.",
            "description":
              [ "The `skip()` method defines the number of query results to skip before returning the remaining results.",
                "",
                " For example, if you query a collection and 50 items match your query, but you set `skip` to 10, the results skip the first 10 items that match and return the 11th through 50th items.",
                "",
                " By default, `skip` is set to 0." ],
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks": [],
  "messages": [],
  "extra":
    {  } }